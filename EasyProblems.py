# problems based on basic programming concepts

#-----------------------------------------------------------------------

# give the output of the below code
# 
# n=7
# c=0
# while n:
#     if n>5:
#         c=c+n-1
#         n=n-1
#     else:
#         break
# print(n)              # 5
# print(c)              # 11

#------------------------------------------------------------------------

# Calculate the sum of all even and odd numbers from 255 to 855.

# n=255
# evensum=0
# ordsum=0
# while n<=855:
#     if n%2==0:
#         evensum+=n
#     else:
#         ordsum+=n
#     n+=1
# print("even sum is:",evensum)
# print("odd sum is:",ordsum)

#----------------------------------------------------------------------------------------------------------

# Print all the integers from a list of values, which may include nested lists, tuples, sets, and dictionaries.

# values = [
#     [1, 2, 3, "a"],
#     (4, 5, 6, "b"),
#     {7, 8, 9, "c"},
#       "wertyuisdfghjk0",
#     {"name": "d", "age": 10}
# ]
# for value in values:
#     if type(value) == dict:
#         for i in value.values():
#             if type(i) == int:
#                 print(i)
#     else:
#         for i in value:
#             if type(i) == int:
#                 print(i)

#----------------------------------------------------------------------------------------------------------

# Merge two strings alternately.
# If one string is longer than the other, append the additional characters to the end of the merged string.

# class Solution(object):
#     def mergeAlternately(self, word1, word2):
#         result = []
#         n = max(len(word1),len(word2))
#         for i in range(n):
#             if i<len(word1):
#                 result += word1[i]
#             if i<len(word2):
#                 result += word2[i]
#         return "".join(result)

# s = Solution()
# print(s.mergeAlternately("abc","pqr"))    #apbqcr
# print(s.mergeAlternately("ab","pqrs"))     #apbqrs

#----------------------------------------------------------------------------------------------------------

# Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

# class Solution(object):
#     def reverseWords(self, s):
#         words = s.split(" ")
#         result = []
#         for word in words:
#             result.append(word[::-1])
#         return " ".join(result)

# s = Solution()
# print(s.reverseWords("Let's take LeetCode contest"))   #s'teL ekat edoCteeL tsetnoc

#----------------------------------------------------------------------------------------------------------

# You are given two strings s and t. 
# String t is generated by random shuffling string s and then adding one more letter at a random position. 
# Return the letter that was added to t.

# class Solution:
#     def findTheDifference(self, s: str, t: str) -> str:
#         for char in t:
#             if char in s:
#                 s = s.replace(char, "", 1)
#             else:
#                 return char

# s = Solution()  
# print(s.findTheDifference("abcd","abcde"))    #e
# print(s.findTheDifference("a","aa"))          #a

#----------------------------------------------------------------------------------------------------------


#Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack
        
# class Solution:
#     def strStr(self, haystack: str, needle: str) -> int:
#         return haystack.find(needle)

# s = Solution()
# print(s.strStr("sadbutsad","sad"))      # 0
# print(s.strStr("hello", "bye"))         # -1

#----------------------------------------------------------------------------------------------------------

# Given two strings s and t, return true if t is an anagram of s, and false otherwise.

# class Solution:
#     def isAnagram(self, s: str, t: str) -> bool:
#         ns = "".join(sorted(s))
#         nt = "".join(sorted(t))
#         return ns == nt

# s = Solution()
# print(s.isAnagram("anagram", "naagra"))   # False
# print(s.isAnagram("anagram", "naagram"))  # True

#----------------------------------------------------------------------------------------------------------

# class Solution:
#     def repeatedSubstringPattern(self, s: str) -> bool:
#         if not s:
#             return False
            
#         ss = (s + s)[1:-1]                  # remove first and last char from s+s 
#         print(ss)                           # for "abab" => "bababa"
#         return ss.find(s) != -1             # if s is found in ss, then return True else False
                        
# s = Solution()

# print(s.repeatedSubstringPattern("aba"))

# method 2:

# class Solution:
#     def repeatedSubstringPattern(self, s: str) -> bool:
#         return s in (s+s)[1:-1]                       # if s is found in ss, then return True else False
        
# s = Solution()
# print(s.repeatedSubstringPattern("abab"))

# method 3:

# class Solution:
#     def repeatedSubstringPattern(self, s: str) -> bool:
#         n = len(s)
#         for i in range(1, n // 2 + 1):
#             if n % i == 0 and s[:i] * (n // i) == s:
#                 return True
        
#         return False

# s = Solution()
# print(s.repeatedSubstringPattern("abab"))

#----------------------------------------------------------------------------------------------------------